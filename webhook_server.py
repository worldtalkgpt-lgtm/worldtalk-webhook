from aiohttp import web
import hmac, hashlib, os, json
from dotenv import load_dotenv
from aiogram import Bot

# üëâ –¥–æ–±–∞–≤—å —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã
from db import async_session            # —Ç–≤–æ—è —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
from sqlalchemy import select
from models.processed_payment import ProcessedPayment  # —Å–º. –º–æ–¥–µ–ª—å –Ω–∏–∂–µ
from user_repo import add_voices

load_dotenv()

CLOUDPAYMENTS_SECRET = os.getenv("CLOUDPAYMENTS_API_SECRET", "")
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None

async def cloudpayments_webhook(request: web.Request):
    raw_text = await request.text()
    headers = request.headers

    # CloudPayments –∏–Ω–æ–≥–¥–∞ —à–ª—ë—Ç form-urlencoded (–≤ —Ç.—á. –≤ "–ü—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    if (not raw_text.strip()
        and headers.get("Content-Type","").startswith("application/x-www-form-urlencoded")):
        form = await request.post()
        # –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç–µ–ª–æ JSON –ª–µ–∂–∏—Ç –≤ –ø–æ–ª–µ Data
        raw_text = form.get("Data", "")

    if not raw_text:
        request.app.logger.error("Empty body from CloudPayments")
        return web.json_response({"code": 13, "message": "Empty body"}, status=400)

    # HMAC –ø–æ–¥–ø–∏—Å—å
    signature = headers.get("Content-HMAC") or headers.get("Content-Hmac")
    expected = hmac.new(
        CLOUDPAYMENTS_SECRET.encode("utf-8"),
        raw_text.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()
    if not signature or signature.lower() != expected.lower():
        return web.json_response({"code": 13, "message": "Invalid signature"}, status=403)

    # JSON
    try:
        payload = json.loads(raw_text)
    except json.JSONDecodeError:
        request.app.logger.exception("Bad JSON")
        return web.json_response({"code": 13, "message": "Bad JSON"}, status=400)

    event = (payload.get("Event") or payload.get("NotificationType") or "").lower()

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –∏ –≤ Check, –∏ –≤ Pay —ç—Ç–∏ –ø–æ–ª—è –µ—Å—Ç—å
    account_id = payload.get("AccountId")
    amount = float(payload.get("Amount", 0))
    currency = (payload.get("Currency") or "RUB").upper()
    tx_id = str(payload.get("TransactionId") or "")  # –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    data = payload.get("Data") or {}
    voices = int(data.get("voices", 0))              # –º—ã –∫–ª–∞–¥—ë–º —ç—Ç–æ –≤ JsonData –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏
    tariff = data.get("tariff")

    if event == "check":
        # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ —Å—É–º–º–∞/–≤–∞–ª—é—Ç–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–∞—Ä–∏—Ñ–æ–º)
        return web.json_response({"code": 0})

    if event == "pay":
        # 1) –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–¥—Å—Ç—Ä–æ–∏ –ø–æ–¥ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ)
        if not account_id or voices <= 0:
            return web.json_response({"code": 13, "message": "bad fields"}, status=400)
        if currency != "RUB":
            return web.json_response({"code": 13, "message": "bad currency"}, status=400)

        # –ü—Ä–∏–º–µ—Ä: —Ç–∞—Ä–∏—Ñ Lite (100 –≥–æ–ª–æ—Å–æ–≤ –∑–∞ 149 ‚ÇΩ)
        # –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî —Å–¥–µ–ª–∞–π —Å–ª–æ–≤–∞—Ä—å –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—É–º–º/–≥–æ–ª–æ—Å–æ–≤ –∏ —Å–≤–µ—Ä—è–π.
        if tariff == "lite":
            if not (voices == 100 and abs(amount - 149.0) < 0.01):
                return web.json_response({"code": 13, "message": "bad amount/voices"}, status=400)
        # else: –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤‚Ä¶

        # 2) –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ TransactionId
        async with async_session() as s:
            if tx_id:
                from sqlalchemy import select
                res = await s.execute(select(ProcessedPayment).where(ProcessedPayment.transaction_id == tx_id))
                if res.scalar_one_or_none():
                    return web.json_response({"code": 0})  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏

            # 3) –Ω–∞—á–∏—Å–ª—è–µ–º –≥–æ–ª–æ—Å–∞
            await add_voices(s, int(account_id), voices)

            # 4) –ø–æ–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
            if tx_id:
                s.add(ProcessedPayment(transaction_id=tx_id))
            await s.commit()

        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ TG
        # if bot:
        #     try:
        #         await bot.send_message(int(account_id), f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount:.0f} ‚ÇΩ –ø—Ä–æ—à–ª–∞. –ù–∞—á–∏—Å–ª–µ–Ω–æ {voices} –≥–æ–ª–æ—Å–æ–≤.")
        #     except Exception:
        #         request.app.logger.exception("Failed to notify user")

        return web.json_response({"code": 0})

    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ —ç–≤–µ–Ω—Ç—ã
    return web.json_response({"code": 0})


def create_app():
    app = web.Application()
    app.router.add_post("/cloudpayments/webhook", cloudpayments_webhook)
    return app

if __name__ == "__main__":
    app = create_app()
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
