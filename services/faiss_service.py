import faiss
import numpy as np
import json
import logging
from typing import List, Dict, Optional, Set

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename="faiss_searcher.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

class FAISSSearcher:
    def __init__(self, index_path: str, mapping_path: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç FAISS-–∏–Ω–¥–µ–∫—Å –∏ mapping.
        :param index_path: –ø—É—Ç—å –∫ .index
        :param mapping_path: –ø—É—Ç—å –∫ .json —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ FAISS-–∏–Ω–¥–µ–∫—Å–∞: {index_path}")
        self.index = faiss.read_index(index_path)

        logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ mapping: {mapping_path}")
        with open(mapping_path, "r", encoding="utf-8") as f:
            self.mapping: Dict[str, Dict] = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.mapping)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ mapping")

    def search(
        self,
        query_embedding: np.ndarray,
        k: int = 5,
        used_ids: Optional[Set[str]] = None,
        topic: Optional[str] = None
    ) -> List[Dict]:
        """
        –ò—â–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Ñ—Ä–∞–∑—ã –ø–æ embedding –∏ —Ç–µ–º–µ.
        """
        if used_ids is None:
            used_ids = set()

        # üí° –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        norm = np.linalg.norm(query_embedding)
        if norm == 0:
            logging.warning("‚Äº –ù—É–ª–µ–≤–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
            return []
        query_embedding = query_embedding / norm

        # üîé –ü–æ–∏—Å–∫ –≤ FAISS
        distances, indices = self.index.search(
            np.array([query_embedding], dtype=np.float32),
            k * 3  # –∏—â–µ–º —Å –∑–∞–ø–∞—Å–æ–º
        )

        results: List[Dict] = []
        fallback: List[Dict] = []

        topic_lower = topic.strip().lower() if topic else None

        for idx in indices[0]:
            idx = int(idx)
            item = self.mapping.get(str(idx))
            if not item:
                logging.warning(f"[FAISS] –ù–µ—Ç item –≤ mapping –ø–æ –∫–ª—é—á—É {idx}")
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            if str(item.get("id")) in used_ids:
                continue

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ
            if topic_lower:
                item_topic = str(item.get("topic", "")).strip().lower()
                if item_topic == topic_lower:
                    results.append(item)
                else:
                    fallback.append(item)
            else:
                results.append(item)

            if len(results) >= k:
                break

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ —Ç–µ–º–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ fallback
        if topic_lower and len(results) < k:
            for item in fallback:
                if str(item.get("id")) in used_ids:
                    continue
                results.append(item)
                if len(results) >= k:
                    break

        logging.info(f"[FAISS] topic={topic_lower} ‚Üí –Ω–∞–π–¥–µ–Ω–æ {len(results)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        return results[:k]
