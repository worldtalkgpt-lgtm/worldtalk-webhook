from aiogram import types
from aiogram.dispatcher import Dispatcher
import os
import random

from handlers.topic_beast import show_beast_topics
from db.session import get_session
from db.user_repo import (
    get_or_create_user,
    get_referrer_id,
    get_user_by_internal_id,
    get_invited_this_week,
    increment_invited_this_week,
    add_voices,
    spend_voice,
    InsufficientVoicesError,
    has_passed_facecheck,
    mark_facecheck_passed,
)
from utils.faiss_searcher import FAISSSearcher
from config import FAISS_CONFIG

CHARACTER_NAME = "–º–∏—Å—Ç–µ—Ä –±–∏—Å—Ç"
MAX_INVITES_PER_WEEK = 5

searcher = FAISSSearcher(
    index_path=FAISS_CONFIG[CHARACTER_NAME]["index_path"],
    mapping_path=FAISS_CONFIG[CHARACTER_NAME]["mapping_path"]
)

def setup(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data == "beast")
    async def process_facecheck_beast(callback_query: types.CallbackQuery):
        telegram_id = callback_query.from_user.id
        async with get_session() as session:
            user = await get_or_create_user(session, telegram_id)
            if await has_passed_facecheck(session, user.id, CHARACTER_NAME):
                await callback_query.answer()
                await show_beast_topics(callback_query)
                return

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("311‚ÄØ–º–ª–Ω", callback_data="beast_wrong_311"),
            types.InlineKeyboardButton("500‚ÄØ–º–ª–Ω", callback_data="beast_wrong_500"),
        )
        keyboard.add(
            types.InlineKeyboardButton("400+‚ÄØ–º–ª–Ω", callback_data="beast_correct"),
            types.InlineKeyboardButton("900‚ÄØ–º–ª–Ω", callback_data="beast_wrong_900"),
        )
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_character"))

        text = (
            "<b>‚îå üß† –§–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å ‚îê</b>\n\n"
            "–û–Ω ‚Äî —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —ç—Ä—ã YouTube.\n"
            "–ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –∑–Ω–∞–∫–æ–º —Å –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.\n\n"
            "‚ùì <b>–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É –ú–∏—Å—Ç–µ—Ä–∞ –ë–∏—Å—Ç–∞ –Ω–∞ YouTube?</b>"
        )

        await callback_query.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    @dp.callback_query_handler(lambda c: c.data == "beast_correct")
    async def correct_answer(callback_query: types.CallbackQuery):
        telegram_id = callback_query.from_user.id
        await callback_query.message.edit_text(
            "<b>‚úÖ –í–µ—Ä–Ω–æ. 400+‚ÄØ–º–ª–Ω.</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–æ—Ä–æ–ª—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞!",
            parse_mode="HTML"
        )

        async with get_session() as session:
            user = await get_or_create_user(session, telegram_id)
            await mark_facecheck_passed(session, user.id, CHARACTER_NAME)

            referrer_internal_id = await get_referrer_id(session, telegram_id)
            if referrer_internal_id:
                ref_user = await get_user_by_internal_id(session, referrer_internal_id)
                if ref_user:
                    invited = await get_invited_this_week(session, ref_user.telegram_id)
                    if invited < MAX_INVITES_PER_WEEK:
                        await add_voices(session, ref_user.telegram_id, 20)
                        await increment_invited_this_week(session, ref_user.telegram_id)
                        try:
                            await callback_query.bot.send_message(
                                ref_user.telegram_id,
                                "üéâ –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–æ—à—ë–ª —Ñ–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å!\n\n+20 –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ üôå"
                            )
                        except Exception as e:
                            print(f"[üí∞ –ú–∏—Å—Ç–µ—Ä‚ÄØBüí∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ–ø–ª–∞—Ç–æ–π –≥–æ–ª–æ—Å–æ–º
        greetings = [
            p for p in searcher.mapping
            if p.get("layer") == "main"
            and p.get("topic") == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
            and str(p.get("character", "")).lower() == CHARACTER_NAME
        ]
        if greetings:
            g = random.choice(greetings)
            audio_path = g.get("audio_path")

            async with get_session() as session:
                try:
                    await spend_voice(session, telegram_id)
                except InsufficientVoicesError:
                    await callback_query.message.answer("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–æ–ª–æ—Å–∞. –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return

            if audio_path and os.path.exists(audio_path):
                with open(audio_path, "rb") as v:
                    await callback_query.message.answer_voice(voice=v, caption=g.get("text", "üëã –ü—Ä–∏–≤–µ—Ç!"))
            else:
                await callback_query.message.answer(g.get("text", "üëã –ü—Ä–∏–≤–µ—Ç!"))

        await show_beast_topics(callback_query)

    @dp.callback_query_handler(lambda c: c.data.startswith("beast_wrong"))
    async def wrong_answer(callback_query: types.CallbackQuery):
        wrong_messages = {
            "beast_wrong_311": "‚ùå –£–∂–µ –¥–∞–≤–Ω–æ –Ω–µ 311‚ÄØ–º–ª–Ω! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            "beast_wrong_500": "‚ùå –ù–µ—Ç, –æ–Ω –µ—â—ë –Ω–µ –¥–æ—à—ë–ª –¥–æ 500‚ÄØ–º–ª–Ω.",
            "beast_wrong_900": "‚ùå –≠—Ç–æ —Å–ª–∏—à–∫–æ–º. –î–∞–∂–µ –¥–ª—è –Ω–µ–≥–æ.",
        }
        msg = wrong_messages.get(callback_query.data, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        retry_keyboard = types.InlineKeyboardMarkup(row_width=1)
        retry_keyboard.add(types.InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="beast"))
        retry_keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_character"))

        await callback_query.message.edit_text(msg, reply_markup=retry_keyboard, parse_mode="HTML")