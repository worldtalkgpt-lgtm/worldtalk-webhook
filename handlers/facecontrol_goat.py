from aiogram import types
from aiogram.dispatcher import Dispatcher
from handlers.topic_goat import show_goat_topics
from db.session import get_session
from db.user_repo import (
    get_or_create_user,
    get_referrer_id,
    get_user_by_internal_id,
    get_invited_this_week,
    increment_invited_this_week,
    add_voices,
    has_passed_facecheck,
    mark_facecheck_passed,
    spend_voice,
    InsufficientVoicesError,
    mark_character_greeting_sent
)
import os
import random
from utils.faiss_searcher import FAISSSearcher
from config import FAISS_CONFIG

CHARACTER_NAME = "–º–µ—Å—Å–∏"
MAX_INVITES_PER_WEEK = 5

# –ó–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
searcher = FAISSSearcher(
    index_path=FAISS_CONFIG[CHARACTER_NAME]["index_path"],
    mapping_path=FAISS_CONFIG[CHARACTER_NAME]["mapping_path"]
)
greetings = [
    p for p in searcher.mapping
    if p.get("layer") == "main"
    and p.get("topic") == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    and str(p.get("character", "")).lower() == CHARACTER_NAME
]

def setup(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data == "messi")
    async def process_facecheck_messi(callback_query: types.CallbackQuery):
        telegram_id = callback_query.from_user.id
        async with get_session() as session:
            user = await get_or_create_user(session, telegram_id)
            if await has_passed_facecheck(session, user.id, CHARACTER_NAME):
                await callback_query.answer()
                await show_goat_topics(callback_query)
                return

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.row(
            types.InlineKeyboardButton("2014", callback_data="messi_wrong_2014"),
            types.InlineKeyboardButton("2018", callback_data="messi_wrong_2018")
        )
        keyboard.row(
            types.InlineKeyboardButton("2022", callback_data="messi_correct"),
            types.InlineKeyboardButton("–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è", callback_data="messi_wrong_never")
        )
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_character"))

        text = (
            "<b>‚îå üß† –§–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å ‚îê</b>\n\n"
            "–¢—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–µ–≥–µ–Ω–¥–æ–π —Ñ—É—Ç–±–æ–ª–∞.\n"
            "–î–æ–∫–∞–∂–∏, —á—Ç–æ –¥–æ—Å—Ç–æ–∏–Ω —É—Å–ª—ã—à–∞—Ç—å –µ–≥–æ –≥–æ–ª–æ—Å!\n\n"
            "‚ùì <b>–í –∫–∞–∫–æ–º –≥–æ–¥—É –ú–µ—Å—Å–∏ —Å—Ç–∞–ª —á–µ–º–ø–∏–æ–Ω–æ–º –º–∏—Ä–∞?</b>"
        )
        await callback_query.message.edit_text(text=text, reply_markup=keyboard, parse_mode="HTML")

    @dp.callback_query_handler(lambda c: c.data == "messi_correct")
    async def correct_answer(callback_query: types.CallbackQuery):
        telegram_id = callback_query.from_user.id
        async with get_session() as session:
            user = await get_or_create_user(session, telegram_id)
            await mark_facecheck_passed(session, user.id, CHARACTER_NAME)

            referrer_internal_id = await get_referrer_id(session, telegram_id)
            if referrer_internal_id:
                ref_user = await get_user_by_internal_id(session, referrer_internal_id)
                if ref_user:
                    invited = await get_invited_this_week(session, ref_user.telegram_id)
                    if invited < MAX_INVITES_PER_WEEK:
                        await add_voices(session, ref_user.telegram_id, 20)
                        await increment_invited_this_week(session, ref_user.telegram_id)
                        try:
                            await callback_query.bot.send_message(
                                ref_user.telegram_id,
                                "üéâ –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–æ—à—ë–ª —Ñ–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å!\n\n+20 –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ üôå"
                            )
                        except Exception as e:
                            print(f"[G.O.A.T] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")

        await callback_query.message.edit_text(
            "<b>‚úÖ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–æ–º–µ–Ω—Ç!</b>\n\n"
            "–¢—ã –ø—Ä–æ—à—ë–ª —Ñ–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å G.O.A.T.\n"
            "üéß –ì–æ—Ç–æ–≤—å—Å—è‚Ä¶ –û–Ω —Å–∞–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è üëá",
            parse_mode="HTML"
        )

        if greetings:
            async with get_session() as session:
                try:
                    await spend_voice(session, telegram_id)
                except InsufficientVoicesError:
                    await callback_query.message.answer("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–æ–ª–æ—Å–∞. –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return

                # –ü–æ–º–µ—á–∞–µ–º greeting –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π (–≤–∞–∂–Ω–æ!)
                await mark_character_greeting_sent(session, user.id, CHARACTER_NAME, topic="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")

            g = random.choice(greetings)
            audio_path = g.get("audio_path")
            if audio_path and os.path.exists(audio_path):
                with open(audio_path, "rb") as v:
                    await callback_query.message.answer_voice(voice=v, caption=g.get("text", "üëã –ü—Ä–∏–≤–µ—Ç!"))
            else:
                await callback_query.message.answer(g.get("text", "üëã –ü—Ä–∏–≤–µ—Ç!"))

        await show_goat_topics(callback_query)

    @dp.callback_query_handler(lambda c: c.data.startswith("messi_wrong"))
    async def wrong_answer(callback_query: types.CallbackQuery):
        wrong_messages = {
            "messi_wrong_2014": "‚ùå –ü–æ—á—Ç–∏! –í 2014 –æ–Ω –±—ã–ª –±–ª–∏–∑–æ–∫, –Ω–æ –Ω–µ —Å—Ç–∞–ª —á–µ–º–ø–∏–æ–Ω–æ–º.",
            "messi_wrong_2018": "‚ùå 2018 –≥–æ–¥? –ù–µ—Ç, —ç—Ç–æ –Ω–µ –µ–≥–æ —Ç—Ä–∏—É–º—Ñ.",
            "messi_wrong_never": "‚ùå –û—à–∏–±–æ—á–∫–∞. –û–Ω —Å—Ç–∞–ª —á–µ–º–ø–∏–æ–Ω–æ–º, –∏ –≤–µ—Å—å –º–∏—Ä —ç—Ç–æ –ø–æ–º–Ω–∏—Ç!",
        }
        msg = wrong_messages.get(callback_query.data, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        retry_keyboard = types.InlineKeyboardMarkup(row_width=1)
        retry_keyboard.add(types.InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="messi"))
        retry_keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_character"))
        await callback_query.message.edit_text(msg, reply_markup=retry_keyboard, parse_mode="HTML")