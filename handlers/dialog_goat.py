import logging
import os
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.session import AsyncSessionLocal
from db.user_repo import get_or_create_user, get_character_topic, get_user_voices
from utils.faiss_searcher import FAISSSearcher
from utils.dialog_manager import DialogManager
from utils.embedding_generator import EmbeddingGenerator
from config import FAISS_CONFIG

logger = logging.getLogger(__name__)

CHARACTER_NAME = "–º–µ—Å—Å–∏"
goat_manager: DialogManager | None = None

# üö¶ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
processing_users = set()

async def init_goat_manager():
    global goat_manager
    if goat_manager is None:
        conf = FAISS_CONFIG[CHARACTER_NAME]
        searcher = FAISSSearcher(conf["index_path"], conf["mapping_path"])
        goat_manager = DialogManager(searcher, CHARACTER_NAME)
        logger.info("‚úÖ –î–∏–∞–ª–æ–≥–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è üá¶üá∑ G.O.A.Tüêê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

async def is_goat(message: types.Message) -> bool:
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, message.from_user.id)
        topic = await get_character_topic(session, user.id, CHARACTER_NAME)
        return topic is not None

async def handle_start_goat(message: types.Message):
    await message.answer("üêê –í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å üá¶üá∑ G.O.A.Tüêê!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def handle_goat_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫
    if user_id in processing_users:
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏, —è –µ—â—ë –¥—É–º–∞—é –Ω–∞–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚Ä¶")
        return

    processing_users.add(user_id)
    try:
        if goat_manager is None:
            await init_goat_manager()

        async with AsyncSessionLocal() as session:
            user = await get_or_create_user(session, user_id)
            voices_left = await get_user_voices(session, user_id)
            if voices_left <= 0:
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –≥–æ–ª–æ—Å–∞", callback_data="buy")
                )
                await message.answer(
                    "üíî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–æ–ª–æ—Å–∞.\n"
                    "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –∫—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –≥–æ–ª–æ—Å–æ–≤.",
                    reply_markup=keyboard
                )
                return

            topic = await get_character_topic(session, user.id, CHARACTER_NAME)
            if not topic:
                return

            embedding = EmbeddingGenerator().get_embedding(message.text)
            phrase = await goat_manager.get_next_phrase(session, user_id, embedding)
            if phrase:
                audio_path = phrase.get("audio_path")
                if audio_path and os.path.exists(audio_path):
                    with open(audio_path, "rb") as audio:
                        await message.answer_voice(voice=audio, caption=phrase.get("text", ""))
                else:
                    await message.answer(phrase.get("text", ""))
            else:
                await message.answer("üêê –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
    except Exception as e:
        logger.error(f"[üá¶üá∑ G.O.A.Tüêê] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        processing_users.discard(user_id)

def setup(dp):
    dp.register_message_handler(handle_start_goat, commands=["messi"], state="*")
    dp.register_message_handler(handle_goat_message, is_goat, content_types=types.ContentTypes.TEXT, state="*")
