from aiogram import types
from aiogram.dispatcher import Dispatcher
from handlers.topic_arni import show_arni_topics
from db.session import get_session
from db.user_repo import (
    get_or_create_user,
    get_referrer_id,
    get_user_by_internal_id,
    get_invited_this_week,
    increment_invited_this_week,
    add_voices,
    spend_voice,
    InsufficientVoicesError,
    has_passed_facecheck,
    mark_facecheck_passed
)
from utils.faiss_searcher import FAISSSearcher
from config import FAISS_CONFIG
import os, random

MAX_INVITES_PER_WEEK = 5
CHARACTER_NAME = "arni"

searcher = FAISSSearcher(
    index_path=FAISS_CONFIG[CHARACTER_NAME]["index_path"],
    mapping_path=FAISS_CONFIG[CHARACTER_NAME]["mapping_path"]
)

def setup(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data == "arnold")
    async def process_facecheck_arnold(callback_query: types.CallbackQuery):
        telegram_id = callback_query.from_user.id
        async with get_session() as session:
            user = await get_or_create_user(session, telegram_id)
            if await has_passed_facecheck(session, user.id, CHARACTER_NAME):
                await callback_query.answer()
                await show_arni_topics(callback_query)
                return

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("4Ô∏è‚É£", callback_data="arnold_wrong_4"),
            types.InlineKeyboardButton("6Ô∏è‚É£", callback_data="arnold_wrong_6"),
        )
        keyboard.add(
            types.InlineKeyboardButton("7Ô∏è‚É£", callback_data="arnold_correct"),
            types.InlineKeyboardButton("8Ô∏è‚É£", callback_data="arnold_wrong_8"),
        )
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_character"))

        text = (
            "<b>‚îå üß† –§–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å ‚îê</b>\n\n"
            "–¢—ã —Å—Ç–æ–∏—à—å –Ω–∞ –ø–æ—Ä–æ–≥–µ –¥–∏–∞–ª–æ–≥–∞ —Å —á–µ–ª–æ–≤–µ–∫–æ–º‚Äë—ç–ø–æ—Ö–æ–π.\n"
            "–ï–≥–æ —Å–∏–ª–∞ —Å—Ç–∞–ª–∞ —Å–∏–º–≤–æ–ª–æ–º —Ü–µ–ª–æ–π —ç—Ä—ã.\n\n"
            "‚ùì <b>–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ê—Ä–Ω–∏ –ø–æ–±–µ–∂–¥–∞–ª –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö Mr.‚ÄØOlympia?</b>"
        )

        await callback_query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data == "arnold_correct")
    async def correct_answer(callback_query: types.CallbackQuery):
        telegram_id = callback_query.from_user.id
        await callback_query.message.edit_text(
            "<b>‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ. 7 —Ç–∏—Ç—É–ª–æ–≤.</b>\n\n"
            "7 —Ä–∞–∑ –æ–Ω –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ ‚Äî —ç—Ç–æ –Ω–∏—á—Ç–æ.\n\n"
            "üîì –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            parse_mode="HTML"
        )

        async with get_session() as session:
            user = await get_or_create_user(session, telegram_id)
            await mark_facecheck_passed(session, user.id, CHARACTER_NAME)

            referrer_internal_id = await get_referrer_id(session, telegram_id)
            if referrer_internal_id:
                ref_user = await get_user_by_internal_id(session, referrer_internal_id)
                if ref_user:
                    invited = await get_invited_this_week(session, ref_user.telegram_id)
                    if invited < MAX_INVITES_PER_WEEK:
                        await add_voices(session, ref_user.telegram_id, 20)
                        await increment_invited_this_week(session, ref_user.telegram_id)
                        try:
                            await callback_query.bot.send_message(
                                ref_user.telegram_id,
                                "üéâ –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–æ—à—ë–ª —Ñ–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å!\n\n+20 –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ üôå"
                            )
                        except Exception as e:
                            print(f"[ü¶æ –ê—Ä–Ω–∏ ü¶æ] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ê—Ä–Ω–∏ + —Å–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
        greetings = [
            p for p in searcher.mapping
            if p.get("layer") == "main"
            and p.get("topic") == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
            and str(p.get("character", "")).lower() == CHARACTER_NAME
        ]
        if greetings:
            g = random.choice(greetings)
            audio_path = g.get("audio_path")

            async with get_session() as session:
                try:
                    await spend_voice(session, telegram_id)
                except InsufficientVoicesError:
                    await callback_query.message.answer("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–æ–ª–æ—Å–∞. –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                    return

            if audio_path and os.path.exists(audio_path):
                with open(audio_path, "rb") as v:
                    await callback_query.message.answer_voice(voice=v, caption=g.get("text", "üëã –ü—Ä–∏–≤–µ—Ç!"))
            else:
                await callback_query.message.answer(g.get("text", "üëã –ü—Ä–∏–≤–µ—Ç!"))

        await show_arni_topics(callback_query)

    @dp.callback_query_handler(lambda c: c.data.startswith("arnold_wrong"))
    async def wrong_answer(callback_query: types.CallbackQuery):
        wrong_messages = {
            "arnold_wrong_4": "‚ùå –û–Ω –±—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ —á–µ—Ç—ã—Ä—ë—Ö. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
            "arnold_wrong_6": "‚ùå –®–µ—Å—Ç—å ‚Äî –ø–æ—á—Ç–∏, –Ω–æ –Ω–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ–º—ë—Ä–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
            "arnold_wrong_8": "‚ùå –í–æ—Å–µ–º—å? –û–Ω –±—ã–ª –≤–µ–ª–∏–∫, –Ω–æ —Ç–∏—Ç—É–ª–æ–≤ —Ä–æ–≤–Ω–æ —Å–µ–º—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
        }
        msg = wrong_messages.get(callback_query.data, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

        retry_keyboard = types.InlineKeyboardMarkup(row_width=1)
        retry_keyboard.add(types.InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="arnold"))
        retry_keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_character"))

        await callback_query.message.edit_text(
            msg,
            parse_mode="HTML",
            reply_markup=retry_keyboard
        )