from aiogram import types
from aiogram.dispatcher import Dispatcher
import logging

from db.session import get_session
from utils.faiss_searcher import FAISSSearcher
from db.user_repo import (
    get_or_create_user,
    set_character_topic,
    reset_other_character_topics
)
from config import FAISS_CONFIG

logger = logging.getLogger(__name__)

CHARACTER_NAME = "–º–∏—Å—Ç–µ—Ä –±–∏—Å—Ç"
searcher = FAISSSearcher(
    index_path=FAISS_CONFIG[CHARACTER_NAME]["index_path"],
    mapping_path=FAISS_CONFIG[CHARACTER_NAME]["mapping_path"]
)

async def show_beast_topics(callback_query: types.CallbackQuery):
    await callback_query.answer()

    # ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–µ–º–∞–º–∏
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.row(
        types.InlineKeyboardButton("üé¶ –ü—É—Ç—å –Ω–∞ YouTube", callback_data="beast_topic_–ü—É—Ç—å –Ω–∞ YouTube"),
        types.InlineKeyboardButton("üí∏ –î–µ–Ω—å–≥–∏ –∏ –ë–∏–∑–Ω–µ—Å", callback_data="beast_topic_–î–µ–Ω—å–≥–∏ –±–∏–∑–Ω–µ—Å –∏ –≤–ª–∏—è–Ω–∏–µ")
    )
    keyboard.row(
        types.InlineKeyboardButton("üí° –ö–æ–Ω—Ç–µ–Ω—Ç –∏ –ò–¥–µ–∏", callback_data="beast_topic_–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–¥–µ–∏")
    )
    keyboard.row(
        types.InlineKeyboardButton("üìà –†–æ—Å—Ç –∏ –ë—É–¥—É—â–µ–µ", callback_data="beast_topic_–ú–∞—Å—à—Ç–∞–± –∏ –±—É–¥—É—â–µ–µ"),
        types.InlineKeyboardButton("üëº –î–µ—Ç—Å—Ç–≤–æ", callback_data="beast_topic_–î–µ—Ç—Å—Ç–≤–æ")
    )
    keyboard.row(
        types.InlineKeyboardButton("ü§ù –î—Ä—É–∑—å—è –∏ –ö–æ–º–∞–Ω–¥–∞", callback_data="beast_topic_–î—Ä—É–∂–±–∞ –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏")
    )

    # üîô –ù–∞–∑–∞–¥
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_character"))

    text = (
        "<b>‚îå ‚úÖ –§–µ–π—Å–∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ–π–¥–µ–Ω ‚îê</b>\n"
        "|\n"
        "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.\n"
        "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π ‚Äî –¥–∏–∞–ª–æ–≥ —Å –ª–µ–≥–µ–Ω–¥–æ–π.\n"
        "|\n"
        "<b>‚îî üí∞ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ‚îò</b>"
    )

    await callback_query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

async def handle_topic_selected(callback_query: types.CallbackQuery):
    await callback_query.answer()
    topic = callback_query.data.replace("beast_topic_", "").strip()
    async with get_session() as session:
        user = await get_or_create_user(session, callback_query.from_user.id)
        await reset_other_character_topics(session, user.id, CHARACTER_NAME)
        await set_character_topic(session, user.id, CHARACTER_NAME, topic)

    # ‚úÖ –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    await callback_query.message.answer(
        f"üü¢ –¢—ã –≤—ã–±—Ä–∞–ª —Ç–µ–º—É: <b>{topic}</b>\n<i>–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–∞–∑–≥–æ–≤–æ—Ä...</i>",
        parse_mode="HTML"
    )

def setup(dp: Dispatcher):
    dp.register_callback_query_handler(show_beast_topics, lambda c: c.data == "beast_correct")
    dp.register_callback_query_handler(handle_topic_selected, lambda c: c.data.startswith("beast_topic_"))